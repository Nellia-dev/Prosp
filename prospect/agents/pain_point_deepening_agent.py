from typing import Optional, List
from pydantic import BaseModel, Field
import json # For mock test

from agents.base_agent import BaseAgent
from core_logic.llm_client import LLMClientBase

# Constants
GEMINI_TEXT_INPUT_TRUNCATE_CHARS = 180000

class PainPointDeepeningInput(BaseModel):
    lead_analysis: str # Summary from LeadAnalysisAgent
    persona_profile: str # Summary from PersonaCreationAgent (or constructed)
    product_service_offered: str # User's product/service
    company_name: str

# Updated Pydantic Models
class DetailedPainPoint(BaseModel):
    pain_point_title: str = Field(default="Dor n√£o especificada", description="T√≠tulo curto e impactante da dor (ex: Baixa Efici√™ncia Operacional, Dificuldade em Escalar Vendas).")
    detailed_description: str = Field(default="Descri√ß√£o n√£o fornecida.", description="Descri√ß√£o elaborada da dor, suas causas e sintomas percebidos no contexto da empresa.")
    potential_business_impact: str = Field(default="Impacto n√£o fornecido.", description="Impacto potencial ou real dessa dor no neg√≥cio do lead (ex: Perda de receita, Aumento de custos, Riscos de conformidade, Insatisfa√ß√£o de clientes).")
    how_our_solution_helps: str = Field(default="Alinhamento com solu√ß√£o n√£o fornecido.", description="Como nosso produto/servi√ßo especificamente aborda e resolve esta dor.")
    investigative_questions: List[str] = Field(default_factory=list, description="1-2 perguntas abertas para aprofundar o entendimento desta dor espec√≠fica durante uma conversa.")

class PainPointDeepeningOutput(BaseModel):
    primary_pain_category: str = Field(default="N√£o especificado", description="Categoria principal que engloba as dores identificadas (ex: Efici√™ncia Operacional, Crescimento de Receita, Gest√£o de Riscos, Custos Elevados).")
    detailed_pain_points: List[DetailedPainPoint] = Field(default_factory=list)
    urgency_level: str = Field(default="medium", description="N√≠vel de urg√™ncia percebido para a resolu√ß√£o destas dores (Enum: 'low', 'medium', 'high', 'critical').")
    overall_pain_summary: Optional[str] = Field(default=None, description="Breve resumo geral (1-2 frases) sobre o cen√°rio de dores do lead e sua aparente prontid√£o ou necessidade por solu√ß√µes.")
    error_message: Optional[str] = None

class PainPointDeepeningAgent(BaseAgent[PainPointDeepeningInput, PainPointDeepeningOutput]):
    def __init__(self, name: str, description: str, llm_client: LLMClientBase, **kwargs):
        super().__init__(name=name, description=description, llm_client=llm_client, **kwargs)

    def _truncate_text(self, text: str, max_chars: int) -> str:
        """Truncates text to a maximum number of characters."""
        return text[:max_chars]

    def process(self, input_data: PainPointDeepeningInput) -> PainPointDeepeningOutput:
        error_message = None
        
        self.logger.info(f"üéØ PAIN POINT DEEPENING AGENT STARTING for company: {input_data.company_name}")
        self.logger.debug(f"üìä Input data: analysis_length={len(input_data.lead_analysis)}, persona_length={len(input_data.persona_profile)}, service='{input_data.product_service_offered}'")

        try:
            # Truncate inputs
            prompt_fixed_overhead = 4000 # Estimate for fixed parts of the prompt and JSON structure
            available_for_dynamic = GEMINI_TEXT_INPUT_TRUNCATE_CHARS - prompt_fixed_overhead
            
            tr_lead_analysis = self._truncate_text(input_data.lead_analysis, int(available_for_dynamic * 0.40))
            tr_persona_profile = self._truncate_text(input_data.persona_profile, int(available_for_dynamic * 0.40))
            # product_service_offered and company_name are typically short. Remaining 20% for them and buffer.
            
            self.logger.debug(f"‚úÇÔ∏è  Text truncation: analysis {len(input_data.lead_analysis)} -> {len(tr_lead_analysis)}, persona {len(input_data.persona_profile)} -> {len(tr_persona_profile)}")

            # Refined prompt_template
            prompt_template = """
                Voc√™ √© um Consultor de Neg√≥cios B2B S√™nior e Estrategista de Contas, com expertise em diagnosticar profundamente os pontos de dor de empresas e alinhar solu√ß√µes de forma eficaz, especialmente no mercado brasileiro.
                Sua tarefa √© analisar as informa√ß√µes da empresa '{company_name}' e da persona alvo, e detalhar os pontos de dor mais cr√≠ticos, avaliando seu impacto e urg√™ncia, e formulando perguntas para aprofundamento.

                INFORMA√á√ïES DISPON√çVEIS PARA AN√ÅLISE:

                1. AN√ÅLISE PRELIMINAR DO LEAD:
                   \"\"\"
                   {lead_analysis}
                   \"\"\"

                2. PERFIL DA PERSONA (Tomador de Decis√£o na {company_name}):
                   \"\"\"
                   {persona_profile}
                   \"\"\"

                3. NOSSO PRODUTO/SERVI√áO (que estamos oferecendo √† {company_name}):
                   "{product_service_offered}"

                INSTRU√á√ïES PARA O DIAGN√ìSTICO DE PONTOS DE DOR:
                1.  **Identifique a Categoria Principal das Dores:** Determine uma categoria geral que englobe os principais desafios da empresa (ex: Efici√™ncia Operacional, Crescimento de Receita, Gest√£o de Riscos, Custos Elevados, Inova√ß√£o Tecnol√≥gica).
                2.  **Detalhe 2-3 Pontos de Dor Cr√≠ticos:** Para cada ponto de dor identificado:
                    a.  `pain_point_title`: Crie um t√≠tulo curto e impactante para a dor.
                    b.  `detailed_description`: Descreva a dor de forma elaborada, incluindo suas poss√≠veis causas e sintomas no contexto da '{company_name}'.
                    c.  `potential_business_impact`: Explique o impacto potencial ou real dessa dor nos neg√≥cios da '{company_name}' (ex: perda de receita, aumento de custos, riscos, insatisfa√ß√£o de clientes, perda de competitividade).
                    d.  `how_our_solution_helps`: Detalhe como o nosso "{product_service_offered}" especificamente aborda e ajuda a resolver esta dor.
                    e.  `investigative_questions`: Formule de 1 a 2 perguntas investigativas abertas e espec√≠ficas para esta dor, destinadas a aprofundar a compreens√£o do problema e suas implica√ß√µes durante uma conversa com a persona.
                3.  **Avalie o N√≠vel de Urg√™ncia Geral:** Com base na sua an√°lise, classifique o n√≠vel de urg√™ncia para a '{company_name}' resolver esses pontos de dor (op√ß√µes: "low", "medium", "high", "critical").
                4.  **Crie um Resumo Geral das Dores:** Forne√ßa um breve resumo (1-2 frases) sobre o cen√°rio geral de dores do lead e sua aparente prontid√£o ou necessidade por solu√ß√µes.
                5.  **Contexto Brasileiro:** Considere as nuances do mercado brasileiro ao avaliar os impactos e a urg√™ncia.

                FORMATO DA RESPOSTA:
                Responda EXCLUSIVAMENTE com um objeto JSON v√°lido, seguindo o schema e as descri√ß√µes de campo abaixo. N√£o inclua NENHUM texto, explica√ß√£o, ou markdown (como ```json) antes ou depois do objeto JSON.

                SCHEMA JSON ESPERADO:
                {{
                    "primary_pain_category": "string - Categoria principal que engloba as dores identificadas (ex: Efici√™ncia Operacional, Crescimento de Receita).",
                    "detailed_pain_points": [ // Lista de 2 a 3 objetos, um para cada dor detalhada.
                        {{
                            "pain_point_title": "string - T√≠tulo curto e impactante da dor (ex: Baixa Efici√™ncia em Processos Chave).",
                            "detailed_description": "string - Descri√ß√£o elaborada da dor, suas causas e sintomas percebidos na empresa.",
                            "potential_business_impact": "string - Impacto potencial ou real dessa dor no neg√≥cio do lead (ex: Perda de receita devido a processos lentos).",
                            "how_our_solution_helps": "string - Como nosso produto/servi√ßo '{product_service_offered}' especificamente aborda esta dor.",
                            "investigative_questions": ["string", ...] // Lista de 1-2 perguntas abertas para aprofundar esta dor espec√≠fica. Lista vazia [] se n√£o houver perguntas espec√≠ficas.
                        }}
                    ],
                    "urgency_level": "string", // Enum: "low", "medium", "high", "critical" - N√≠vel de urg√™ncia geral para resolver estas dores.
                    "overall_pain_summary": "string | null" // Breve resumo geral (1-2 frases) sobre o cen√°rio de dores do lead. Use null se n√£o houver um resumo conciso a adicionar.
                }}
            """

            formatted_prompt = prompt_template.format(
                lead_analysis=truncated_analysis,
                persona_profile=truncated_persona,
                product_service_offered=input_data.product_service_offered,
                company_name=input_data.company_name
            )
            self.logger.debug(f"Prompt for {self.name} (length: {len(formatted_prompt)}):\n{formatted_prompt[:600]}...")

            llm_response_str = self.generate_llm_response(formatted_prompt)

            if not llm_response_str:
                self.logger.error(f"‚ùå LLM call returned no response for {self.name} for company {input_data.company_name}")
                return PainPointDeepeningOutput(error_message="LLM call returned no response.")

            self.logger.debug(f"LLM response received for {self.name} (length: {len(llm_response_str)}). Attempting to parse.")
            
            parsed_output = self.parse_llm_json_response(llm_response_str, PainPointDeepeningOutput)
            
            if parsed_output.error_message:
                self.logger.warning(f"‚ö†Ô∏è  {self.name} JSON parsing/validation failed for {input_data.company_name}. Error: {parsed_output.error_message}. Raw response snippet: {llm_response_str[:500]}")
                return parsed_output

            pain_points_count = len(parsed_output.detailed_pain_points)
            self.logger.info(f"‚úÖ Pain point analysis successful for {input_data.company_name}: category='{parsed_output.primary_pain_category}', points_found={pain_points_count}, urgency='{parsed_output.urgency_level}'.")
            return parsed_output

        except Exception as e:
            self.logger.error(f"‚ùå An unexpected error occurred in {self.name} for {input_data.company_name}: {e}", exc_info=True)
            return PainPointDeepeningOutput(error_message=f"An unexpected error occurred: {str(e)}")

if __name__ == '__main__':
    from loguru import logger
    import sys
    logger.remove()
    logger.add(sys.stderr, level="DEBUG")

    class MockLLMClient(LLMClientBase):
        def __init__(self, api_key: str = "mock_key"):
            super().__init__(api_key)

        def generate_text_response(self, prompt: str) -> Optional[str]:
            logger.debug(f"MockLLMClient received prompt snippet:\n{prompt[:600]}...")
            # Simulate LLM returning valid JSON based on the refined prompt and new model
            return json.dumps({
                "primary_pain_category": "Efici√™ncia Operacional e Escalabilidade",
                "detailed_pain_points": [
                    {
                        "pain_point_title": "Otimiza√ß√£o de Processos Manuais em Expans√£o",
                        "detailed_description": "A Empresa Exemplo, ao expandir para LATAM, enfrenta desafios com processos manuais que n√£o escalam, especialmente em QA, gerando lentid√£o e potenciais erros.",
                        "potential_business_impact": "Atrasos em lan√ßamentos de produtos/features, aumento de custos operacionais para manter a qualidade, dificuldade em atender a nova demanda do mercado LATAM.",
                        "how_our_solution_helps": "Nossas Solu√ß√µes Incr√≠veis de Automa√ß√£o com IA podem automatizar ciclos de QA repetitivos e complexos, liberando a equipe para focar em testes mais estrat√©gicos e acelerando o time-to-market.",
                        "investigative_questions": [
                            "Como a expans√£o para LATAM est√° impactando especificamente os prazos de entrega de software?",
                            "Quais s√£o os principais gargalos que voc√™s percebem nos processos de QA atualmente?"
                        ]
                    },
                    {
                        "pain_point_title": "Integra√ß√£o de Novas Tecnologias com Sistemas Legados",
                        "detailed_description": "A busca por moderniza√ß√£o tecnol√≥gica mencionada pela Empresa Exemplo pode ser dificultada pela necessidade de integrar novas ferramentas com sistemas j√° existentes, um desafio comum para Diretores de Opera√ß√µes como Carlos Mendes.",
                        "potential_business_impact": "Aumento da complexidade t√©cnica, custos de integra√ß√£o elevados, poss√≠vel resist√™ncia da equipe a m√∫ltiplas ferramentas desconexas, tempo maior para obter valor das novas tecnologias.",
                        "how_our_solution_helps": "Nossas Solu√ß√µes Incr√≠veis de Automa√ß√£o com IA s√£o projetadas com foco em integra√ß√£o facilitada (APIs robustas, conectores) e oferecem um dashboard unificado, simplificando a gest√£o.",
                        "investigative_questions": [
                            "Carlos, ao considerar novas tecnologias, qual √© sua maior preocupa√ß√£o em rela√ß√£o √† integra√ß√£o com o stack tecnol√≥gico atual da Empresa Exemplo?",
                            "Como a equipe t√©cnica costuma lidar com a curva de aprendizado e ado√ß√£o de novas plataformas?"
                        ]
                    }
                ],
                "urgency_level": "high",
                "overall_pain_summary": "A Empresa Exemplo possui dores significativas relacionadas √† efici√™ncia e escalabilidade de seus processos de TI, especialmente QA, impulsionadas pela expans√£o. H√° uma necessidade clara de moderniza√ß√£o e automa√ß√£o."
            })

    logger.info("Running mock test for PainPointDeepeningAgent...")
    mock_llm = MockLLMClient(api_key="mock_llm_key")
    agent = PainPointDeepeningAgent(
        name="TestPainPointDeepeningAgent",
        description="Test Agent for Pain Point Deepening",
        llm_client=mock_llm
    )

    test_lead_analysis = "A Empresa Exemplo (m√©dio porte, setor de TI) enfrenta desafios na otimiza√ß√£o de processos internos, muitos ainda manuais, para suportar sua recente expans√£o para o mercado LATAM. Ganhou pr√™mios de inova√ß√£o e busca modernizar sua pilha de tecnologia."
    test_persona_profile = "Carlos Mendes √© o Diretor de Opera√ß√µes da Empresa Exemplo. Suas principais responsabilidades incluem garantir a efici√™ncia operacional e a implementa√ß√£o de novas tecnologias. Ele busca solu√ß√µes com ROI claro e que sejam de f√°cil integra√ß√£o. √â motivado por resultados mensur√°veis e pelo reconhecimento de otimizar a opera√ß√£o da empresa. Seu estilo de comunica√ß√£o √© direto e formal."
    test_product_service = "Nossas Solu√ß√µes Incr√≠veis de Automa√ß√£o com IA para QA e DevOps"
    test_company_name = "Empresa Exemplo"

    input_data = PainPointDeepeningInput(
        lead_analysis=test_lead_analysis,
        persona_profile=test_persona_profile,
        product_service_offered=test_product_service,
        company_name=test_company_name
    )

    output = agent.process(input_data)

    if output.error_message:
        logger.error(f"Error: {output.error_message}")
    else:
        logger.success("PainPointDeepeningAgent processed successfully.")
        logger.info(f"Primary Pain Category: {output.primary_pain_category}")
        logger.info(f"Urgency Level: {output.urgency_level}")
        logger.info(f"Overall Pain Summary: {output.overall_pain_summary}")
        logger.info(f"Detailed Pain Points ({len(output.detailed_pain_points)}):")
        for i, dp_point in enumerate(output.detailed_pain_points):
            logger.info(f"  Pain Point {i+1}: {dp_point.pain_point_title}")
            logger.info(f"    Description: {dp_point.detailed_description}")
            logger.info(f"    Impact: {dp_point.potential_business_impact}")
            logger.info(f"    Solution Fit: {dp_point.how_our_solution_helps}")
            logger.info(f"    Investigative Questions: {dp_point.investigative_questions}")

    assert output.error_message is None
    assert output.primary_pain_category == "Efici√™ncia Operacional e Escalabilidade"
    assert len(output.detailed_pain_points) == 2
    assert "expans√£o para LATAM" in output.detailed_pain_points[0].detailed_description
    assert len(output.detailed_pain_points[0].investigative_questions) > 0
    assert output.urgency_level == "high"
    assert output.overall_pain_summary is not None

    logger.info("\nMock test for PainPointDeepeningAgent completed successfully.")

```
