---
description: Specialized rules for developing Nellia Prospector agents
globs: 
alwaysApply: false
---
# Agent Development Rules - Nellia Prospector

## ü§ñ Agent Implementation Priority

### Current Status (DO NOT CHANGE COMPLETED AGENTS)
- ‚úÖ **Lead Intake & Validation Agent** - COMPLETE, tested, working
- ‚úÖ **Lead Analysis Agent** - COMPLETE, tested, working  
- ‚úÖ  **Persona Creation Agent** - NEEDS PORTING from cw.py lines ~200-300
- ‚úÖ  **Approach Strategy Agent** - NEEDS PORTING from cw.py lines ~300-400
- ‚úÖ  **Message Crafting Agent** - NEEDS PORTING from cw.py lines ~400-500

## üìã Agent Implementation Checklist

For each new agent, ensure ALL these items:

### 1. Class Structure (MANDATORY)
```python
class NewAgent(BaseAgent[InputModel, OutputModel]):
    """Agent description with specific purpose"""
    
    def __init__(self, llm_client: LLMClient, temperature: float = 0.7):
        super().__init__(llm_client, temperature)
        self.agent_name = "AgentName"  # For metrics tracking
    
    def process(self, input_data: InputModel) -> OutputModel:
        """Main processing method - MUST implement"""
        pass
    
    def _build_prompt(self, input_data: InputModel) -> str:
        """Build LLM prompt - MUST implement"""
        pass
    
    def _parse_response(self, response: str) -> dict:
        """Parse LLM response to dict - MUST implement"""
        pass
```

### 2. Data Flow Validation (CRITICAL)
- **Input validation**: Use Pydantic models from `lead_structures.py`
- **Output enrichment**: Add new fields, preserve ALL existing data
- **Error handling**: Never lose input data, always return enriched or error state
- **Metrics tracking**: Track processing time, tokens used, success/failure

### 3. LLM Prompt Engineering (CRITICAL for 527% ROI goal)
```python
def _build_prompt(self, input_data: InputModel) -> str:
    return f"""You are an expert B2B lead analyst working for Nellia Prospector.

CONTEXT:
Company: {input_data.company_name or 'Unknown'}
Website: {input_data.url}
Industry Analysis: {getattr(input_data, 'company_summary', 'Not analyzed')}
Services: {getattr(input_data, 'identified_services_offered', [])}
Pain Points: {getattr(input_data, 'potential_pain_points', [])}

TASK: [Specific agent task]

REQUIREMENTS:
- Be specific and actionable
- Focus on B2B lead conversion
- Consider Brazilian market context
- Aim for 527% ROI optimization

RESPOND WITH VALID JSON:
{{
    "field1": "value",
    "field2": ["list", "items"],
    "confidence_score": 0.0-1.0
}}"""
```

### 4. Error Handling Patterns (MANDATORY)
```python
def process(self, input_data: InputModel) -> OutputModel:
    start_time = time.time()
    tokens_before = self.llm_client.total_tokens
    
    try:
        # Validate input
        if not self._validate_input(input_data):
            return self._create_error_response(input_data, "Invalid input")
        
        # Process with LLM
        prompt = self._build_prompt(input_data)
        response = self.llm_client.generate(
            prompt=prompt,
            temperature=self.temperature,
            response_format="json"
        )
        
        # Parse and validate response
        parsed = self._parse_response(response.content)
        result = self._create_success_response(input_data, parsed)
        
        # Track metrics
        self._update_metrics(start_time, tokens_before)
        return result
        
    except Exception as e:
        self.logger.error(f"Agent {self.agent_name} failed", error=str(e))
        return self._create_error_response(input_data, str(e))
```

## üéØ Agent-Specific Implementation Goals

### Persona Creation Agent
**Purpose**: Create detailed decision-maker personas for B2B outreach
**Input**: `AnalyzedLead` with company analysis
**Output**: `LeadWithPersona` with decision-maker profile

**Key Requirements**:
- Identify likely decision-maker role (CEO, CTO, Marketing Director, etc.)
- Define their goals, challenges, and motivations
- Infer communication style (formal/informal, technical/business)
- Consider Brazilian business culture
- Include contact approach recommendations

### Approach Strategy Agent  
**Purpose**: Develop tailored outreach strategy based on persona and company analysis
**Input**: `LeadWithPersona` with decision-maker profile
**Output**: `LeadWithStrategy` with approach plan

**Key Requirements**:
- Match Nellia's USPs to identified pain points
- Create specific value proposition angles
- Define first interaction objective (demo, call, resource)
- Suggest optimal communication channel
- Include timing recommendations

### Message Crafting Agent
**Purpose**: Generate personalized outreach messages for initial contact
**Input**: `LeadWithStrategy` with approach plan  
**Output**: `FinalProspectPackage` with ready-to-send message

**Key Requirements**:
- Create compelling subject line (email) or opener (LinkedIn)
- Reference specific company details for personalization
- Address persona's specific challenges and goals
- Include clear, relevant call-to-action
- Maintain Brazilian Portuguese context when needed
- Generate 2-3 message variants for A/B testing

## ‚ö†Ô∏è Critical Implementation Notes

### DO NOT:
- Change existing working agents (Lead Intake, Lead Analysis)
- Break the data flow pipeline
- Remove any existing data fields from models
- Skip error handling or metrics tracking
- Hardcode any business-specific content

### ALWAYS:
- Preserve ALL input data in output models
- Add comprehensive logging with context
- Handle LLM rate limits and timeouts gracefully
- Use structured JSON outputs for consistency
- Test with real harvester data files
- Follow the established BaseAgent pattern
- Track metrics for performance optimization

### BUSINESS CONTEXT:
- Target: 527% ROI for clients
- Market: Brazilian B2B companies
- Goal: Transform raw leads into personalized, high-converting outreach
- Quality over quantity: Better to have fewer, highly personalized messages

## üîß Testing & Validation

Before marking any agent as complete:
1. **Unit test** with mock data
2. **Integration test** with real harvester output
3. **Performance test** - should process <10 seconds per lead
4. **Quality validation** - outputs should be actionable and specific
5. **Pipeline test** - ensure data flows correctly to next agent

Remember: Each agent is a step toward the 527% ROI goal. Quality and personalization are paramount.
